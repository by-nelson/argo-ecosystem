apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: dag-demo-template
spec:
  entrypoint: main
  artifactRepositoryRef:
    configMap: minio-artifact-repository
    key: default-v1-minio-artifact-repository
  templates:
    - name: main 
      dag:
        tasks:
          - name: guesser
            template: random
          - name: star
            template: starwars
          - name: guesser-triple
            template: random
            arguments:
              parameters:
                - name: range
                  value: 3
                - name: safe-to-retry
                  value: true
          - name: echo-guesser
            template: echo
            arguments:
              parameters:
                - name: message
                  value: "{{tasks.guesser.outputs.result}}"
            depends: (guesser.Succeeded || guesser.Failed) && star.Succeeded
          - name: echo-starwars
            template: echo
            arguments:
              parameters:
                - name: message
                  value: "{{= jsonpath(toJson(tasks.star.outputs.result), '$.name')}}"
            depends: "star.Succeeded && (guesser.Succeeded && guesser-triple.Failed)"
          - name: archive-starwars
            template: archive
            arguments:
              parameters:
                - name: message
                  value: "{{tasks.star.outputs.result}}"
            depends: "star.Succeeded"
    - name: echo
      inputs:
        parameters:
          - name: message
      container: 
        image: busybox
        command: ["echo"]
        args:
          - "{{ inputs.parameters.message }}"
    - name: archive
      inputs:
        parameters:
          - name: message
      container:
        image: busybox
        command: [sh, -c]
        args: ["echo '{{ inputs.parameters.message }}' | tee /tmp/message.txt"]
      outputs:
        artifacts:
          - name: message-file
            path: /tmp/message.txt
            s3:
              key: dag-message 
    - name: random
      inputs:
        parameters:
          - name: goal
            value: 1
          - name: range
            value: 2
          - name: safe-to-retry
            value: false
      script:
        image: python:alpine3.6
        retryStrategy:
          limit: "5"
          expression: "asInt(lastRetry.exitCode) == 1 && {{inputs.parameters.safe-to-retry}} == true"
        source: |
          import os
          import sys
          import random

          x = int(os.environ["X"])
          n = int(os.environ["N"])

          random_value = random.randint(1, n)
          print(f"Generated random value: {random_value}")

          if random_value == x:
              print("Success: The random value equals X!")
              sys.exit(0)
          else:
              print("Failure: The random value does not equal X.")
              sys.exit(1)
        command: [python]
        env:
          - name: "X"
            value: "{{ inputs.parameters.goal }}"
          - name: "N"
            value: "{{ inputs.parameters.range }}"
    - name: starwars
      http:
        timeoutSeconds: 60
        url: "https://swapi.info/api/people/1"
        method: "GET"
        headers:
          - name: "Content-Type"
            value: "json"
        successCondition: "response.body contains \"Luke\""
